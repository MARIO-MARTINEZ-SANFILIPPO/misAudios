Hola, hoy vamos a meternos de lleno en el mundo de Arduino. Nos vamos a guiar con el manual Domótica prácticas Arduino la idea entender cómo se programa lo básico y cómo eso se usa en proyectos reales. Eh, desde sensores hasta pequeños robots.
Exacto. Lo interesante de Arduino es justamente eso, que te permite, digamos, conectar tu código con el mundo físico. Es una herramienta superpotente para automatizar cosas o bueno, para jugar un poco con la robótica.
Entonces, saber cómo es esto del lenguaje. Es basado en C++, pero dicen que es más accesible, ¿no? Y tiene como una estructura fija, eh, dos funciones clave, setup, que se ejecuta una vez al principio para configurar todo,
y loop, que es la que se repite y se repite sin parar. Ahí está, digamos, la acción principal del proyecto. Esta estructura setup loop es eh fundamental. Piensa en un dispositivo que tiene que funcionar solo, de forma autónoma. Necesita esa base.
Claro, para estar siempre atento o haciendo su tarea. Y dentro de eso manejamos información, usamos variables, ¿no? Como cajitas para guardar datos que cambian.
Ajá. Como la lectura de un sensor, por ejemplo. Y también están las constantes, que son valores fijos como high y low, que básicamente son encendido y apagado para señales digitales, o también input y output,
¿cierto? Para decirle a un pin si va a recibir información o si la hago a mandar.
Exacto. Ah, y los en el código superimportantes. Esas notas con o que dejamos te salvan después para entender qué hiciste o para que otro lo entienda.
Totalmente. Bueno, ¿y cómo hacemos para que Arduino interactúe? Hablabas de los pines input y output. Primero hay que decirle a cada pin qué va a hacer, ¿no? Con pin mode
puedes mandar señales. La más simple es digital right. Le dices high y manda 5 V o low y manda 0 V. Así prendes y apagas un LED. Lo típico.
Okay. Y si quiero No sé, regular la intensidad de ese LED, no solo prendido o apagado.
Buena pregunta. Para eso está analog right. No es analógico de verdad en la mayoría de los pines, pero simula niveles intermedios. Usa técnica llamada PWM, modulación por ancho de pulso. Te permite e variar la intensidad de un LED o la velocidad de un motor. Simple.
¿Entendido? Y para leer el mundo exterior, para escuchar,
pues si es algo simple, como un botón presionado o no, usa digital read te devuelve high o low. Pero si tienes un sensor que te da un rango de valores como eh un sensor de luz que mide cuánta luz hay, ahí necesitas analog read. Este te da un número normalmente entre 0 y 1023 que representa ese nivel.
Ajá. Y también está la función delay para hacer pausas.
Sí, delay detiene el programa por los milisegundos que le digas. Es útil, pero ojo, si usas delays muy largos, el Arduino se queda congelado y no puede reaccionar a otras cosas. mientras espera. Hay que usarla con cuidado.
Claro, tiene sentido. Bueno, y el manual conecta todo esto con componentes prácticos, ¿no? Sensores.
Exacto. Menciona varios. Por ejemplo, el HCSR04, que es un sensor ultrasónico. Mide distancias con sonido, como un murciélago, ideal para que un robot no se choque.
Ah, qué bueno.
Luego está el PIR, el HCSR501. Este detecta movimiento, pero por cambios en la radiación infrarroja, o sea, el calor. Perfecto para sistemas de alarma. o luces automáticas
y el LDR, el sensor de luz.
Ese es más simple. Es una resistencia que cambia su valor según cuánta luz le llega. Muy útil para saber si es de día o de noche, por ejemplo. Son como los sentidos del Arduino.
Y para que Arduío haga cosas están los actuadores. El manual habla mucho de servomotores.
Sí, los servos son geniales. Son motores que puedes controlar para que giren a un ángulo super preciso. No giran sin parar, sino que van a una posición y se quedan ahí.
Necesitas una librería. No, algo llamado servo.
Correcto. Incluyes la librería servo.hh y luego usas comandos como attach para decirle en qué pin está conectado el cervo y WR para mandarlo a un ángulo específico. Son los músculos.
Me gusta eso de sentidos y músculos. Y con eso el manual arma unos robots.
Claro, ahí se junta todo. El RACI, por ejemplo, es un robot anticolisiones muy básico. Usa el sensor ultrasónico. Adelante. Si detecta un obstáculo muy cerca, digamos a menos de 25 cm.
¿Qué hace?
Pues detiene los motores de las ruedas, retrocede un poquito, gira y sigue. Es una lógica simple. Sentir, decidir, actuar.
Qué bueno.
Y luego lo complican un poco más, ¿no?
Sí. El Ru es una mejora. Le ponen un cervo al sensor ultrasónico. Entonces, antes de avanzar, el robot puede mirar a los lados moviendo el sensor, buscar donde hay más espacio libre y dirigirse hacia allá. Es un poco más inteligente, digamos. Ah, claro. Escanea el área.
Y había otro. R O M C O D I. Ese era distinto.
Ese ya no es autónomo. Se controla con un mando a distancia infrarrojo como el de la tele. Usa un sensor Toop para recibir las señales del mando.
O sea, que ahí ya entra otro tipo de interacción.
Exacto. Estos proyectos te muestran cómo puedes ir construyendo sobre lo anterior, ¿viste? Empezar simple y añadir capas de complejidad. Y algo clave que también menciona el manual, la importancia de crear tus propias funciones. para no tener todo el código amontonado en el loop.
Ah, para organizar mejor,
claro. Y usar el monitor serie con serial.bin en el setup y serial.printline en el loop. Puedes imprimir mensajes o valores de sensores en la computadora. Es fundamental para ver qué está pasando dentro del Arduino y encontrar errores.
Perfecto. Entonces, haciendo un repaso rápido, vimos la estructura básica setup y loop. Cómo configurar pines con pin mode, cómo mandar señales con digital WR y analog. Right. Y cómo leer con digital read y analog read.
Ajá.
Hablamos de sensores clave como el ultrasónico, el de movimiento pier y el de luz LDR y de actuadores como los servomotores. Y vimos como todo esto cobra vida en robots que esquivan cosas o que podemos controlar.
Exactamente. Lo que tenemos aquí son como bloques de construcción, piezas para sentir el mundo, piezas para actuar sobre él y el código que las une. Y eso nos deja pensando, ¿no?, con estos mismos bloques. ¿Qué otras cosas podríamos construir? ¿Qué problemas cotidianos podríamos eh intentar resolver? O ¿qué interacciones nuevas podríamos diseñar si combinamos estas piezas de otra manera?